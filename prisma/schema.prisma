generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// MODELS
model User {
  id      Int      @id @default(autoincrement())
  name    String
  queue   Queue[]
  videoId Int?
  videos  Video[]  @relation(name: "votes")
  Post    Post[]
  Profile Profile?
  Video   Video[]
}

model Queue {
  id         Int     @id @default(autoincrement())
  videos     Video[]
  owner      User    @relation(fields: [ownerId], references: [id])
  ownerId    Int
  nowPlaying Video   @relation(fields: [videoId], references: [id], name: "nowPlaying")
  videoId    Int
}

model Video {
  id           Int     @id @default(autoincrement())
  channelTitle String
  lengthText   String
  viewCount    String
  thumbnail    String
  title        String
  videoId      String
  votes        User[] @relation(name: "votes")
  queue        Queue   @relation(fields: [queueId], references: [id])
  queueId      Int
  addedBy      User    @relation(fields: [userId], references: [id], name: "addedBy")
  userId       Int
  isPlaying    Boolean @default(false)
  isDone       Boolean @default(false)
  extra        String?
}

// OLD
model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
