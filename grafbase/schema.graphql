

type User @model {
  name: String!
  queue: [Queue]
}

type Queue @model {
  owner: User!
  videos: [Video]
  nowPlaying: JSON
}

type Video @model {
  queue: Queue!
  author: JSON!
  lengthSeconds: Int!
  stats: JSON!
  thumbnails: [JSON]!
  title: String!
  videoId: String!
  votes: [User]
  addedBy: JSON!
  isPlaying: Boolean! @default(value: false)
  isDone: Boolean! @default(value: false)
}

schema @auth(rules: [{ allow: public }]) {
  query: Query
}

# const queue = g.model('Queue', {
#   videos: g
#     .relation(() => video)
#     .optional()
#     .list()
#     .optional(),
#   owner: g.relation(user).optional(), # !temporary
#   nowPlaying: g.json().optional(),
# })

# const video = g.model('Video', {
#   author: g.json(),
#   lengthSeconds: g.int(),
#   stats: g.json(),
#   thumbnails: g.json().list(),
#   title: g.string(),
#   videoId: g.string(),
#   votes: g.relation(user).optional().list().optional(),
#   queue: g.relation(queue).optional(),
#   addedBy: g.json(),
#   isPlaying: g.boolean().default(false),
#   isDone: g.boolean().default(false),
# })

# export default config({
#   schema: g,
#   auth: {
#     rules: (rules) => {
#       rules.public()
#     },
#   },
# })
